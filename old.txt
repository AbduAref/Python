# Create a 9x9 sudoku grid with the following rules:
# 1. Each row must contain each of the digits from 1 to 9 exactly once.
# 2. Each column must contain each of the digits from 1 to 9 exactly once.
# 3. Each of the 9 3x3 sub-grids must contain each of the digits from 1 to 9 exactly once.
# 4. The grid must be solvable.
import re

def main():
    choice = 0
    while choice not in (1,2,3,4,5,6): #checks if number is not in this
        try:
            print('game is starting . . .') #prints out a welcome message
            choice = int(input('[1] Load New puzzle \n[2] Load Partically Solved Puzzle \n[3] Check solution \n[4] Solve puzzle \n[5] Save \n[6]Exit\n')) #prints out the menu
        except:
            print('Please enter a number')
        if choice ==1:
            

board= [
[5,3,'','',7,'','','',''],
[6,'','',1,9,5,'','',''],
['',9,8,'','','','',6,''],
[8,'','','',6,'','','',3],
[4,'','',8,'',3,'','',1],
[7,'','','',2,'','','',6],
['',6,'','','','',2,8,''],
['','','',4,1,9,'','',5],
['','','','',8,'','',7,9]
]
board_s= [
[5,3,4,6,7,8,9,1,2],
[6,7,2,1,9,5,3,4,8],
[1,9,8,3,4,2,5,6,7],
[8,5,9,7,6,1,4,2,3],
[4,2,6,8,5,3,7,9,1],
[7,1,3,9,2,4,8,5,6],
[9,6,1,5,3,7,2,8,4],
[2,8,7,4,1,9,6,3,5],
[3,4,5,2,8,6,1,7,9]
]



    # if choice == 1:
    #     board = [ ['.']*9 for l in range(9) ]
    #     #result = grid(choice,board)
    #     print('To solve it go on option 4')
    #     board = drawgrid(board)
    #     main()
    # elif choice == 2:
    #     board = load()
    #     grid(choice,board)
    # elif choice == 3:
    #     answer = checkanswer(board)
    #     print('You got,',answer)
    # elif choice ==4:
    #     main()
    # elif choice == 5:
    #     save(board)
    # else:
    #     print('Exiting')



def grid(choice1,board):
     # remove the choice 1 or add more?
    if choice1 == 1:
        board = drawgrid(board)
    number = 1000 # just a starter value to make it enter the loop then it changes to allow the user to exit the loop
    loop = True
    while loop or (number >999 or number < 0): #add a way to make loop false
        try:
            print('Press enter to exit anytime')
            strnumber=input('Please enter your number in the format digit and row and column like 257 to say digit 7 in row 2 and column 5 \n')
            # if strnumber=='e':
            #     main()
            if strnumber == '':
                main()
            #print(strnumber is '')
            #print(strnumber,'<-------')
            number = int(strnumber)
            
            if len(strnumber) != 3:
                print('Please enter a number in the format digit and row and column like 257 to say digit 2 in row 5 and column 7')
                grid(choice1,board)
            board[int(strnumber[0])-1][int(strnumber[1])-1]=strnumber[2] # -1 because of a list (row,column is the format)
        except:
            print('Please enter a number between 1 and 9')
        else:
            # for index,row in enumerate(board): # Maybe turn printing into a function??
            #     row = '|'.join(''.join(row[i:i+3]) for i in [0,3,6]) #Gets each 3 items in a row and puts a | in between them
            #     if index and index%3==0:
            #         print('-'*11)
            #     print(row)


            #board = drawgrid(board) #dont need draw board but put it in for good measure
            drawgrid(board) 
            
def drawgrid(board):
     #Creates an array with ..
    for index,row in enumerate(board):
        #row = '|'.join([''.join(row[0:3])]+[''.join(row[3:6])]+[''.join(row[6:9])]) # Gets each 3 items in a row and puts a | in between them
        row = '|'.join(''.join(row[i:i+3]) for i in [0,3,6]) #Gets each 3 items in a row and puts a | in between them
        if index and index%3==0:
            #print('-'*11)
            print('-'*3+'+'+'-'*3+'+'+'-'*3)
        print(row)
    #return board

def checkanswer(board): #USE LOAD FUNCTION INSIDE THE CHECKANSWER AND THEN CHECKANSWER
    f = open("answer.txt", "r")
    answer = f.read()
    score = 0
    for i in range(len(0,answer(),3)):
        if board[i]== answer[i]:
            score +=1
    return score  


# def load():
#     #add all the options
#     with open('save.txt', 'r') as f:
#         content = f.read()
#         for i in range(0,len(content),3):
#             board.append(str(content[i]+str(content[i+1]+str(content[i+2]))


def load():
    #add all the options
    with open('save.txt') as f:
        board = re.findall(r'\d\d\d', f.read())

def save(board):
    #add all the options
    # with open('save.txt', 'a') as f:
    #     for i in range(len(board)):
    #         for j in range(len(board[i])):
    #             f.write(i,j,boardp[i][j])
    #     f.write(''.join(board)) #fix later
    with open('save.txt','a') as f:
        f.write(board)


if __name__ == "__main__":
    main()